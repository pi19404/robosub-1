# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Where to find user code.
USER_DIR = $(CURDIR)/../src

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = robosub_tests.out

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

LIB_DECISION = $(USER_DIR)/decision
LIB_MOVEMENT = $(USER_DIR)/movement
LIB_STATE_MACHINE = $(USER_DIR)/state_machine
LIB_VISION = $(USER_DIR)/vision

MY_TARGET_FOLDERS = $(LIB_DECISION) $(LIB_MOVEMENT) \
                    $(LIB_STATE_MACHINE) $(LIB_VISION)

OBJS += vision_test.o can_call.o

# Flags passed to the preprocessor.
CPPFLAGS += $(shell echo `pkg-config --cflags opencv`)
CPPFLAGS += -I$(GTEST_DIR)/include
CPPFLAGS += -I$(LIB_DECISION)/tollbooth

ROBOSUB_INCLUDES =
$(foreach dir,$(MY_TARGET_FOLDERS),$(eval ROBOSUB_INCLUDES += -I$(dir));)
CPPFLAGS += $(ROBOSUB_INCLUDES)

LIBS += $(shell echo `pkg-config --libs opencv`)
$(foreach dir,$(MY_TARGET_FOLDERS),$(eval LIBS += -L./$(dir));)

CXX = /usr/bin/g++

all : check_gtest_exists $(TESTS)

.PHONY: all clean find_robosub_obs $(MY_TARGET_FOLDERS)

print-%:
	@echo '$($*)'

check_gtest_exists:
ifeq ($(GTEST_DIR),)
	echo "No GTEST_DIR found."
	echo "Try: export GTEST_DIR='/path/to/gtest-1.6.0'"
	exit 1
endif

clean :
	$(RM) $(TESTS) $(OBJS) gtest.a gtest_main.a *.o
	make -C $(USER_DIR) clean

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
robosub_tests.out: $(MY_TARGET_FOLDERS) find_robosub_objs $(OBJS) gtest_main.a
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(CXXFLAGS) -pthread $(OBJS) gtest_main.a -o $@ $(LIBS)

find_robosub_objs:
	$(foreach dir,$(MY_TARGET_FOLDERS),$(eval OBJS += $(shell ls $(dir)/*.o)))

# Print out a variable from the commandline. E.g., "make print-CPPFLAGS"
print-%:
	@echo '$($*)'

that: $(MY_TARGET_FOLDERS)

$(MY_TARGET_FOLDERS):
	@$(MAKE) -C $@ objects ROBOSUB_INCLUDES="$(ROBOSUB_INCLUDES)";

