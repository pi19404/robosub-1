
AclTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000082  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002b  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b1  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000074  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000146  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bf  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_17>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9c:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_17>:
#define MOSI	PB2
#define MISO	PB3
#define SCK		PB1

ISR(SPI_STC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	0f 92       	push	r0
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	cli();
  c2:	f8 94       	cli
	
	char spi_data = (char)SPDR;
  c4:	8f e2       	ldi	r24, 0x2F	; 47
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	80 81       	ld	r24, Z
  cc:	89 83       	std	Y+1, r24	; 0x01
	
	PORTE = spi_data >> 4;
  ce:	83 e2       	ldi	r24, 0x23	; 35
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	22 95       	swap	r18
  d6:	2f 70       	andi	r18, 0x0F	; 15
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	
	sei();
  dc:	78 94       	sei
}
  de:	0f 90       	pop	r0
  e0:	cf 91       	pop	r28
  e2:	df 91       	pop	r29
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void)
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
		// Disable Interrupts
		cli();
 100:	f8 94       	cli
		
		// Enable LED Operation
		DDRE = 0x04;
 102:	82 e2       	ldi	r24, 0x22	; 34
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e0       	ldi	r18, 0x04	; 4
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
		
        // Setup SPI DDR
		DDRB = _BV(MOSI) | _BV(SCK);
 10c:	87 e3       	ldi	r24, 0x37	; 55
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	26 e0       	ldi	r18, 0x06	; 6
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
		
		// Enable Interrupts, SPI, Master - clock rate 500 KHz
		SPCR = _BV(SPIE) | _BV(SPE) | _BV(MSTR) | _BV(SPR0);
 116:	8d e2       	ldi	r24, 0x2D	; 45
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	21 ed       	ldi	r18, 0xD1	; 209
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
		
		// Enable Interrupts
		sei();
 120:	78 94       	sei
    }
 122:	ee cf       	rjmp	.-36     	; 0x100 <main+0x8>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
