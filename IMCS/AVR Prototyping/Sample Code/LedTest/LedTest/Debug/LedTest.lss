
LedTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000232  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000041  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000ea  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000a4  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018e  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000030  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f5  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000043  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  ac:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_12>:
} LedMode;

volatile LedMode current_direction = INCREMENT;

ISR(TIMER1_COMPA_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	cli();
  d2:	f8 94       	cli
	
	// Check Direction Change
	if( _BV(PE7) == PORTE )
  d4:	83 e2       	ldi	r24, 0x23	; 35
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	80 38       	cpi	r24, 0x80	; 128
  de:	21 f4       	brne	.+8      	; 0xe8 <__vector_12+0x34>
	{
		// Shift to previous LED
		current_direction = DECREMENT;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 00 01 	sts	0x0100, r24
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <__vector_12+0x44>
	}
	else if ( _BV(PE4) == PORTE )
  e8:	83 e2       	ldi	r24, 0x23	; 35
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	80 81       	ld	r24, Z
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	11 f4       	brne	.+4      	; 0xf8 <__vector_12+0x44>
	{
		// Shift to next LED
		current_direction = INCREMENT;
  f4:	10 92 00 01 	sts	0x0100, r1
	}
	
	// Increment LED
	if( current_direction == INCREMENT )
  f8:	80 91 00 01 	lds	r24, 0x0100
  fc:	88 23       	and	r24, r24
  fe:	51 f4       	brne	.+20     	; 0x114 <__vector_12+0x60>
	{
		PORTE <<= 1;
 100:	83 e2       	ldi	r24, 0x23	; 35
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	23 e2       	ldi	r18, 0x23	; 35
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	22 0f       	add	r18, r18
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	09 c0       	rjmp	.+18     	; 0x126 <__vector_12+0x72>
	}
	// Decrement LED
	else 
	{
		PORTE >>= 1;
 114:	83 e2       	ldi	r24, 0x23	; 35
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	23 e2       	ldi	r18, 0x23	; 35
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	26 95       	lsr	r18
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	}
	TCNT1 = 0;
 126:	8c e4       	ldi	r24, 0x4C	; 76
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	11 82       	std	Z+1, r1	; 0x01
 12e:	10 82       	st	Z, r1
	
	sei();
 130:	78 94       	sei
}
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:

int main(void)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	// Set LEDS on Port E
	DDRE |= 0xF0;
 154:	82 e2       	ldi	r24, 0x22	; 34
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	22 e2       	ldi	r18, 0x22	; 34
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	20 6f       	ori	r18, 0xF0	; 240
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	PORTE |= 0x10;
 166:	83 e2       	ldi	r24, 0x23	; 35
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	23 e2       	ldi	r18, 0x23	; 35
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	20 61       	ori	r18, 0x10	; 16
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	
	// Set Timer 1024 pre-scaled, interrupt every 0.5 seconds.
	cli();
 178:	f8 94       	cli
	TCCR1B |= _BV(CS12) | _BV(CS10);
 17a:	8e e4       	ldi	r24, 0x4E	; 78
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2e e4       	ldi	r18, 0x4E	; 78
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	25 60       	ori	r18, 0x05	; 5
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
	OCR1A = 1024;
 18c:	8a e4       	ldi	r24, 0x4A	; 74
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	34 e0       	ldi	r19, 0x04	; 4
 194:	fc 01       	movw	r30, r24
 196:	31 83       	std	Z+1, r19	; 0x01
 198:	20 83       	st	Z, r18
	TCNT1 = 0;
 19a:	8c e4       	ldi	r24, 0x4C	; 76
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	11 82       	std	Z+1, r1	; 0x01
 1a2:	10 82       	st	Z, r1
	TIMSK |= _BV(OCIE1A);
 1a4:	87 e5       	ldi	r24, 0x57	; 87
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	27 e5       	ldi	r18, 0x57	; 87
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	20 61       	ori	r18, 0x10	; 16
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
	sei();
 1b6:	78 94       	sei
	
    while(1)
    {
    }
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x6c>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
